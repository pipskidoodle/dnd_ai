"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chat = void 0;
const config_1 = require("./config");
const persona_1 = require("./persona");
const utils_1 = require("./utils");
class Chat {
    persona;
    config;
    model;
    messages;
    constructor(persona, config, model) {
        this.persona = persona;
        this.config = config;
        this.model = model;
        this.messages = [];
        this.reset();
    }
    async request(prompt, opt) {
        utils_1.debug.log('⬆️ sending request:', prompt.message);
        const newMessages = [
            ...(opt?.messages ? opt.messages : this.messages),
            {
                role: 'user',
                content: prompt.message,
            },
        ];
        const response = await this.model.request(newMessages, this.persona.config, opt);
        if (!response) {
            throw new Error('Chat request failed');
        }
        utils_1.debug.log('⬇️ received response:', response.content);
        const messagesWithResponse = [
            ...newMessages,
            {
                role: 'assistant',
                content: response.content,
            },
        ];
        if (prompt.parse) {
            const res = await prompt.parse(response);
            if (res.success) {
                if (this.config.retainMemory) {
                    this.messages = messagesWithResponse;
                }
                return {
                    ...response,
                    content: res.data,
                };
            }
            else {
                const promptRetries = prompt.promptRetries ?? config_1.PromptDefaultRetries;
                if (promptRetries > 0 && res.retryPrompt) {
                    utils_1.debug.log(`⚠️ retrying request with prompt: ${res.retryPrompt}\nCurrent message stack:`, messagesWithResponse);
                    return this.request({
                        ...prompt,
                        message: res.retryPrompt,
                        promptRetries: promptRetries - 1,
                    }, { messages: messagesWithResponse });
                }
                else {
                    throw new Error('Response parsing failed');
                }
            }
        }
        if (this.config.retainMemory) {
            this.messages = messagesWithResponse;
        }
        return response;
    }
    reset() {
        this.messages = [
            {
                role: 'system',
                content: (0, persona_1.buildMessage)(this.persona),
            },
        ];
    }
}
exports.Chat = Chat;
